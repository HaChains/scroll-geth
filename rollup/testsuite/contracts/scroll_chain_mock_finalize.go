// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ScrollChainMockFinalizeMetaData contains all meta data concerning the ScrollChainMockFinalize contract.
var ScrollChainMockFinalizeMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_chainId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"_messageQueue\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_verifier\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addProver\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addSequencer\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitBatch\",\"inputs\":[{\"name\":\"_version\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_parentBatchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_chunks\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"_skippedL1MessageBitmap\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitBatchWithBlobProof\",\"inputs\":[{\"name\":\"_version\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_parentBatchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_chunks\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"_skippedL1MessageBitmap\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_blobDataProof\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"committedBatches\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"finalizeBatch4844\",\"inputs\":[{\"name\":\"_batchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_postStateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_withdrawRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_blobDataProof\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizeBatchWithProof4844\",\"inputs\":[{\"name\":\"_batchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_postStateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_withdrawRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_blobDataProof\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_aggrProof\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizeBundle\",\"inputs\":[{\"name\":\"_batchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_postStateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_withdrawRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizeBundleWithProof\",\"inputs\":[{\"name\":\"_batchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_postStateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_withdrawRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_aggrProof\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizedStateRoots\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"importGenesisBatch\",\"inputs\":[{\"name\":\"_batchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_messageQueue\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_verifier\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_maxNumTxInChunk\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isBatchFinalized\",\"inputs\":[{\"name\":\"_batchIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isProver\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isSequencer\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastFinalizedBatchIndex\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"layer2ChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"maxNumTxInChunk\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"messageQueue\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeProver\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeSequencer\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revertBatch\",\"inputs\":[{\"name\":\"_firstBatchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_lastBatchHeader\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPause\",\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateMaxNumTxInChunk\",\"inputs\":[{\"name\":\"_maxNumTxInChunk\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdrawRoots\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"CommitBatch\",\"inputs\":[{\"name\":\"batchIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"batchHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FinalizeBatch\",\"inputs\":[{\"name\":\"batchIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"batchHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"withdrawRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RevertBatch\",\"inputs\":[{\"name\":\"batchIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"batchHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateMaxNumTxInChunk\",\"inputs\":[{\"name\":\"oldMaxNumTxInChunk\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newMaxNumTxInChunk\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateProver\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"status\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateSequencer\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"status\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ErrorAccountIsNotEOA\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorBatchHeaderV0LengthTooSmall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorBatchHeaderV1LengthTooSmall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorBatchHeaderV3LengthMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorBatchIsAlreadyCommitted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorBatchIsAlreadyVerified\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorBatchIsEmpty\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorCallPointEvaluationPrecompileFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorCallerIsNotProver\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorCallerIsNotSequencer\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorFoundMultipleBlobs\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorGenesisBatchHasNonZeroField\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorGenesisBatchImported\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorGenesisDataHashIsZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorGenesisParentBatchHashIsNonZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncompleteL2TransactionData\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectBatchHash\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectBatchIndex\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectBatchVersion\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectBitmapLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectBitmapLengthV0\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectBitmapLengthV1\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorIncorrectChunkLengthV1\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorLastL1MessageSkipped\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorNoBlobFound\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorNoBlockInChunkV1\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorNumTxsLessThanNumL1Msgs\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorRevertFinalizedBatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorRevertNotStartFromEnd\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorRevertZeroBatches\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorStateRootIsZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorTooManyTxsInOneChunk\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorUnexpectedPointEvaluationPrecompileOutput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ErrorZeroAddress\",\"inputs\":[]}]",
	Bin: "0x60e060405234801562000010575f80fd5b5060405162002b4c38038062002b4c8339810160408190526200003391620000b9565b8282826001600160a01b03821615806200005457506001600160a01b038116155b15620000735760405163a7f9319d60e01b815260040160405180910390fd5b6001600160401b039092166080526001600160a01b0390811660a0521660c052506200010c915050565b80516001600160a01b0381168114620000b4575f80fd5b919050565b5f805f60608486031215620000cc575f80fd5b83516001600160401b0381168114620000e3575f80fd5b9250620000f3602085016200009d565b915062000103604085016200009d565b90509250925092565b60805160a05160c0516129dd6200016f5f395f818161031b015281816105de0152610d4301525f818161035a01528181611038015281816119fa01528181611baf0152611fad01525f81816101ee0152818161054f0152610c7901526129dd5ff3fe608060405234801561000f575f80fd5b50600436106101d0575f3560e01c80635c975abb116100fe5780638a3362311161009e578063ea5f084f1161006e578063ea5f084f1461046d578063eb43a1331461048c578063ef6602ba1461049f578063f2fde38b146104a8575f80fd5b80638a336231146104235780638da5cb5b14610436578063b571d3dd14610447578063bedb86fb1461045a575f80fd5b80636d46e987116100d95780636d46e987146103d35780636df4e686146103f5578063715018a61461040857806386b053a914610410575f80fd5b80635c975abb146103a257806368485e47146103ad5780636989ca7c146103c0575f80fd5b80631d49e457116101745780632b7ac3f3116101445780632b7ac3f3146103165780633b70c18a146103555780633fdeecb21461037c5780634f099e3d1461038f575f80fd5b80631d49e457146102b25780631e228302146102c55780632362f03e146102d85780632571098d146102f7575f80fd5b80630a245924116101af5780630a24592414610244578063116a1f42146102765780631325aca01461028c5780631794bb3c1461029f575f80fd5b8062b0f4d7146101d457806303c7f4af146101e9578063059def611461022d575b5f80fd5b6101e76101e2366004612145565b6104bb565b005b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b0390911681526020015b60405180910390f35b610236609c5481565b604051908152602001610224565b61026661025236600461220f565b609b6020525f908152604090205460ff1681565b6040519015158152602001610224565b61026661028436600461222f565b609c54101590565b6101e761029a366004612385565b610691565b6101e76102ad366004612422565b6107c6565b6101e76102c036600461220f565b610947565b6101e76102d336600461222f565b6109d5565b6102366102e636600461222f565b609d6020525f908152604090205481565b61023661030536600461222f565b609e6020525f908152604090205481565b61033d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610224565b61033d7f000000000000000000000000000000000000000000000000000000000000000081565b6101e761038a36600461245b565b610a22565b6101e761039d3660046124a2565b610be6565b60655460ff16610266565b6101e76103bb3660046124ff565b610e10565b6101e76103ce36600461220f565b610eb6565b6102666103e136600461220f565b609a6020525f908152604090205460ff1681565b6101e7610403366004612584565b610f0c565b6101e7611093565b6101e761041e3660046125ea565b6110a6565b6101e761043136600461220f565b61121d565b6033546001600160a01b031661033d565b6101e761045536600461220f565b6112a4565b6101e76104683660046126af565b6112fa565b61023661047b36600461222f565b609f6020525f908152604090205481565b6101e761049a3660046126ce565b61131b565b61023660975481565b6101e76104b636600461220f565b611404565b335f908152609b602052604090205460ff166104ea57604051637b263b1760e01b815260040160405180910390fd5b6104f261147a565b5f805f6105008c8c8b6114c0565b9250925092505f80610513856019015190565b90505f610521866039015190565b90505f609e8161053260018861272e565b81526020019081526020015f2054905061054d828c8c611529565b7f0000000000000000000000000000000000000000000000000000000000000000818e8e868f8f5f9060409261058593929190612741565b8860405160200161059d989796959493929190612768565b6040516020818303038152906040528051906020012093505050505f6105c4855160f81c90565b604051630581350960e31b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632c09a8489061061b90849087908c908c9089906004016127d6565b5f6040518083038186803b158015610631575f80fd5b505afa158015610643573d5f803e3d5ffd5b505050505f610656866011015160c01c90565b9050610673607987018261066e896009015160c01c90565b611625565b6106808185878f8f611642565b505050505050505050505050505050565b335f908152609a602052604090205460ff166106c057604051631e6edd6f60e11b815260040160405180910390fd5b6106c861147a565b5f805f6106d68888886116b9565b9250925092505f805f808c60ff166001111580156106f8575060028d60ff1611155b1561078757610709858b8b8b611721565b60405196810196945090925090506107248360ff8f16611799565b60c086811b600185015281811b600985015285901b60118401526019830182905261075a836107516117a0565b60399190910152565b6059830187905261076c838a8a6117e6565b6107808361077b8a6079612807565b902090565b93506107a0565b60405163bacd96e960e01b815260040160405180910390fd5b6107ad85828b8b5f6117f2565b6107b78685611835565b50505050505050505050505050565b5f54610100900460ff16158080156107e457505f54600160ff909116105b806107fd5750303b1580156107fd57505f5460ff166001145b6108655760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b5f805460ff191660011790558015610886575f805461ff0019166101001790555b61088e611873565b6097829055609980546001600160a01b038581166001600160a01b0319928316179092556098805492871692909116919091179055604080515f8152602081018490527f6d0f49971e462a2f78a25906f145cb29cd5e7bd01ebf681ac8f58cb814e5877a910160405180910390a18015610941575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61094f6118a1565b6001600160a01b0381163b1561097857604051632c0fc2e160e11b815260040160405180910390fd5b6001600160a01b0381165f818152609b6020908152604091829020805460ff1916600190811790915591519182527f967f99d5d403870e4356ff46556df3a6b6ba1f50146639aaedfb9f248eb8661e91015b60405180910390a250565b6109dd6118a1565b609780549082905560408051828152602081018490527f6d0f49971e462a2f78a25906f145cb29cd5e7bd01ebf681ac8f58cb814e5877a910160405180910390a15050565b80610a405760405163f9a9465f60e01b815260040160405180910390fd5b5f8052609e6020527fedae58bba15aea52a58242ef195db2cc4de2b75de265dbb0d58482df22a959785415610a885760405163c22a199f60e01b815260040160405180910390fd5b5f80610a9485856118fb565b5050915091505f610aa9836011015160c01c90565b600984015160c01c600185015160c01c855160f81c01010190508015610ae25760405163f4f38de560e01b815260040160405180910390fd5b505f610aef836019015190565b03610b0d576040516303d840a960e41b815260040160405180910390fd5b5f610b19836039015190565b14610b3757604051632781461960e11b815260040160405180910390fd5b5f8080527fc5dc36ae4e7617e4c4d23ddfcde33c79e9ed64c300aed766a9288a6b9b31f63d829055609e6020527fedae58bba15aea52a58242ef195db2cc4de2b75de265dbb0d58482df22a959788490556040518291907f2c32d4ae151744d0bf0b9464a3e897a1d17ed2f1af71f7c9a75f12ce0d28238f908290a3604080518481525f60208201819052839290915f8051602061298883398151915291015b60405180910390a35050505050565b335f908152609b602052604090205460ff16610c1557604051637b263b1760e01b815260040160405180910390fd5b610c1d61147a565b83610c3b5760405163f9a9465f60e01b815260040160405180910390fd5b5f805f80610c498a8a6118fb565b609c5493975091955093509150808311610c765760405163092d315560e41b815260040160405180910390fd5b5f7f0000000000000000000000000000000000000000000000000000000000000000610ca2838661272e565b5f848152609e6020908152604080832054609d83529281902054905160c09590951b6001600160c01b0319169185019190915260e09290921b6001600160e01b0319166028840152602c830152604c820152606c81018b9052608c810186905260ac81018a905260cc0160405160208183030381529060405290505f610d29875160f81c90565b6040516322a262c960e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906322a262c990610d8090849089908e908e90899060040161283c565b5f6040518083038186803b158015610d96575f80fd5b505afa158015610da8573d5f803e3d5ffd5b505050609c869055505f858152609e602090815260408083208e9055609f90915290208a9055610dd7846119de565b604080518c8152602081018c9052879187915f80516020612988833981519152910160405180910390a350505050505050505050505050565b335f908152609b602052604090205460ff16610e3f57604051637b263b1760e01b815260040160405180910390fd5b610e4761147a565b5f805f610e558a8a896114c0565b9250925092505f610e67846039015190565b9050610e74818787611529565b5f610e83856011015160c01c90565b9050610e9b607986018261066e886009015160c01c90565b610ea88184868c8c611642565b505050505050505050505050565b610ebe6118a1565b6001600160a01b0381165f818152609a60209081526040808320805460ff19169055519182527f631cb110fbe6a87fba5414d6b2cff02264480535cd1f5abdbc4fa638bc0b569291016109ca565b610f146118a1565b5f805f610f2187876118fb565b935093505092505f610f3386866118fb565b509250505080831115610f5957604051635453822b60e11b815260040160405180910390fd5b5f609d81610f68846001612807565b81526020019081526020015f205414610f9457604051633f707d7d60e21b815260040160405180910390fd5b609c548311610fb657604051632ad7756360e11b815260040160405180910390fd5b805b83811061100e575f818152609d602052604080822080549083905590519091829184917ecae2739091badfd91c373f0a16cede691e0cd25bb80cff77dd5caeb471014691a3506110078161288f565b9050610fb8565b505f61101e856009015160c01c90565b604051637a6e933360e01b815281850360048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a6e9333906024015f604051808303815f87803b158015611081575f80fd5b505af11580156107b7573d5f803e3d5ffd5b61109b6118a1565b6110a45f611a55565b565b335f908152609a602052604090205460ff166110d557604051631e6edd6f60e11b815260040160405180910390fd5b6110dd61147a565b60028860ff16116111015760405163bacd96e960e01b815260040160405180910390fd5b6040805160c181019091526111198160ff8b16611799565b5f805f6111278b8b8b6116b9565b60c082901b6001880152919450925090505f80611146838c8c8c611721565b91509150808301925061115d83828c8c60016117f2565b60c081811b600988015283901b6011870152601986018290525f61117f6117a0565b905061118c818a8a611529565b60398701819052605987018690525f808d60018f516111ab919061272e565b815181106111bb576111bb6128a4565b6020908102919091018101519081015160f81c603c028101601219015190915060c01c60c081901b60798b015291506111f19050565b6111fc888b8b611aa6565b60c1882061120a8782611835565b5050505050505050505050505050505050565b6112256118a1565b6001600160a01b0381163b1561124e57604051632c0fc2e160e11b815260040160405180910390fd5b6001600160a01b0381165f818152609a6020908152604091829020805460ff1916600190811790915591519182527f631cb110fbe6a87fba5414d6b2cff02264480535cd1f5abdbc4fa638bc0b569291016109ca565b6112ac6118a1565b6001600160a01b0381165f818152609b60209081526040808320805460ff19169055519182527f967f99d5d403870e4356ff46556df3a6b6ba1f50146639aaedfb9f248eb8661e91016109ca565b6113026118a1565b801561131357611310611ab3565b50565b611310611b0d565b335f908152609b602052604090205460ff1661134a57604051637b263b1760e01b815260040160405180910390fd5b61135261147a565b816113705760405163f9a9465f60e01b815260040160405180910390fd5b5f805f61137d87876118fb565b93509350935050609c5482116113a65760405163092d315560e41b815260040160405180910390fd5b609c8290555f828152609e60209081526040808320889055609f90915290208490556113d1816119de565b6040805186815260208101869052849184915f80516020612988833981519152910160405180910390a350505050505050565b61140c6118a1565b6001600160a01b0381166114715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161085c565b61131081611a55565b60655460ff16156110a45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161085c565b5f8080836114e15760405163f9a9465f60e01b815260040160405180910390fd5b6114eb86866118fb565b505f818152609e60205260409020549295509093509150156115205760405163092d315560e41b815260040160405180910390fd5b93509350939050565b5f80600a6001600160a01b031685858560405160200161154b939291906128b8565b60408051601f1981840301815290829052611565916128d1565b5f60405180830381855afa9150503d805f811461159d576040519150601f19603f3d011682016040523d82523d5f602084013e6115a2565b606091505b5091509150816115c5576040516371ebedf560e01b815260040160405180910390fd5b5f818060200190518101906115da91906128ec565b9150507f73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001811461161d57604051638a89514360e01b815260040160405180910390fd5b505050505050565b805f0361163157505050565b61163d5f848484611b46565b505050565b83609c546001011461166757604051631d17cec760e21b815260040160405180910390fd5b609c8490555f848152609e60209081526040808320859055609f9091529020819055611692856119de565b6040805183815260208101839052849186915f805160206129888339815191529101610bd7565b5f805f83515f036116dd57604051632974c17360e21b815260040160405180910390fd5b6116e786866118fb565b60019091015f818152609d6020526040902054929650945092501590506115205760405163012137ab60e41b815260040160405180910390fd5b8251604080516020830281019091525f918291825b82811015611782575f806117668a8481518110611755576117556128a4565b6020026020010151878d8c8c611c2b565b9085529a8b019a95909501945050602090910190600101611736565b506020919091029081900320969095509350505050565b8082535050565b5f49600149816117c357604051630168f63160e21b815260040160405180910390fd5b80156117e257604051634c976a6160e11b815260040160405180910390fd5b5090565b80826079850137505050565b8161010060ff8601046020021461181c57604051630808452960e31b815260040160405180910390fd5b801561182e5761182e83838787611d63565b5050505050565b5f828152609d602052604080822083905551829184917f2c32d4ae151744d0bf0b9464a3e897a1d17ed2f1af71f7c9a75f12ce0d28238f9190a35050565b5f54610100900460ff166118995760405162461bcd60e51b815260040161085c9061290e565b6110a4611d77565b6033546001600160a01b031633146110a45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161085c565b5f808080853560f81c81818103611920576119168888611da6565b909650905061194a565b60028211611932576119168888611e1f565b6003821061194a576119448888611e90565b90965090505b808620945061195d866001015160c01c90565b935061196d866011015160c01c90565b5f858152609d602052604090205490935085148015906119b557505f8052609e6020527fedae58bba15aea52a58242ef195db2cc4de2b75de265dbb0d58482df22a959785415155b156119d35760405163150e0a2160e11b815260040160405180910390fd5b505092959194509250565b801561131057604051630e0143f560e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338050fd4906024015f604051808303815f87803b158015611a43575f80fd5b505af115801561182e573d5f803e3d5ffd5b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6040826081850137505050565b611abb61147a565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611af03390565b6040516001600160a01b03909116815260200160405180910390a1565b611b15611ec9565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611af0565b8015610941578082035f805b83811015611c2257610100818503811115611b6c57508084035b8760018114611b7e5787519350611b83565b873593505b50604051632afb09e760e11b8152600481018590526024810182905260448101849052602097909701967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355f613ce906064015f604051808303815f87803b158015611bf8575f80fd5b505af1158015611c0a573d5f803e3d5ffd5b50505050610100840193505061010081019050611b52565b50505050505050565b60405185515f91829160208901919081908490611c49908590611f12565b90505f5b81811015611c9e57611c60858483611f79565b92505f611c6e603c83612959565b611c79876001612807565b611c839190612807565b90505f611c8f82611f8d565b97909701965050600101611c4d565b506020850282016040526001840193505f5b8115611d2b575f611cc086611f8d565b905083611cd181838f8f8f8f611f9c565b94505f611cdd886120cb565b905082811015611d0057604051638c5a4ea360e01b815260040160405180910390fd5b9c82019c9b82019b603c97909701965f19949094019360209186039190910492909201910301611cb0565b609754811115611d4e57604051634d56f17560e01b815260040160405180910390fd5b50508190039020989197509095505050505050565b8015610941578361182e6001828585611b46565b5f54610100900460ff16611d9d5760405162461bcd60e51b815260040161085c9061290e565b6110a433611a55565b5f816059811015611dca5760405163027f9c1f60e11b815260040160405180910390fd5b6040519150808483378082016040525f611de8836009015160c01c90565b905061010060ff8201046020026059018214611e175760405163c2110c9b60e01b815260040160405180910390fd5b509250929050565b5f816079811015611e435760405163a40ab48b60e01b815260040160405180910390fd5b6040519150808483378082016040525f611e61836009015160c01c90565b905061010060ff8201046020026079018214611e1757604051630c1c91df60e21b815260040160405180910390fd5b5f8160c18114611eb3576040516332496bf560e21b815260040160405180910390fd5b6040519150808483378082016040529250929050565b60655460ff166110a45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161085c565b5f611f1c836120da565b9050805f03611f3e57604051634dbe8cff60e01b815260040160405180910390fd5b611f49603c82612959565b611f54906001612807565b8214611f7357604051634edcb40160e11b815260040160405180910390fd5b92915050565b5f611f858484846120e6565b949350505050565b5f611f7382603a015160f01c90565b5f855f03611fab5750856120c1565b7f00000000000000000000000000000000000000000000000000000000000000005f80805b8981101561208d5760ff89169150600889901c811580611fee575082155b15611ffd578060200288013593505b600184841c165f0361207c5760405163ae453cd560e01b8152600481018a90525f906001600160a01b0387169063ae453cd590602401602060405180830381865afa15801561204e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120729190612970565b8d52506020909b019a5b506001988901989788019701611fd0565b505060ff5f1988011681811c600116156120ba57604051632eba9e1160e21b815260040160405180910390fd5b5050879150505b9695505050505050565b5f611f73826038015160f01c90565b5f611f73825160f81c90565b5f81603c0260010184019350603a84845e5050603a01919050565b5f8083601f840112612111575f80fd5b5081356001600160401b03811115612127575f80fd5b60208301915083602082850101111561213e575f80fd5b9250929050565b5f805f805f805f805f60c08a8c03121561215d575f80fd5b89356001600160401b0380821115612173575f80fd5b61217f8d838e01612101565b909b50995060208c0135985060408c0135975060608c0135965060808c01359150808211156121ac575f80fd5b6121b88d838e01612101565b909650945060a08c01359150808211156121d0575f80fd5b506121dd8c828d01612101565b915080935050809150509295985092959850929598565b80356001600160a01b038116811461220a575f80fd5b919050565b5f6020828403121561221f575f80fd5b612228826121f4565b9392505050565b5f6020828403121561223f575f80fd5b5035919050565b803560ff8116811461220a575f80fd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b038111828210171561229257612292612256565b604052919050565b5f601f83601f8401126122ab575f80fd5b823560206001600160401b03808311156122c7576122c7612256565b8260051b6122d683820161226a565b93845286810183019383810190898611156122ef575f80fd5b84890192505b858310156123785782358481111561230b575f80fd5b8901603f81018b1361231b575f80fd5b8581013560408682111561233157612331612256565b612342828b01601f1916890161226a565b8281528d82848601011115612355575f80fd5b828285018a8301375f9281018901929092525083525091840191908401906122f5565b9998505050505050505050565b5f805f805f806080878903121561239a575f80fd5b6123a387612246565b955060208701356001600160401b03808211156123be575f80fd5b6123ca8a838b01612101565b909750955060408901359150808211156123e2575f80fd5b6123ee8a838b0161229a565b94506060890135915080821115612403575f80fd5b5061241089828a01612101565b979a9699509497509295939492505050565b5f805f60608486031215612434575f80fd5b61243d846121f4565b925061244b602085016121f4565b9150604084013590509250925092565b5f805f6040848603121561246d575f80fd5b83356001600160401b03811115612482575f80fd5b61248e86828701612101565b909790965060209590950135949350505050565b5f805f805f80608087890312156124b7575f80fd5b86356001600160401b03808211156124cd575f80fd5b6124d98a838b01612101565b909850965060208901359550604089013594506060890135915080821115612403575f80fd5b5f805f805f805f60a0888a031215612515575f80fd5b87356001600160401b038082111561252b575f80fd5b6125378b838c01612101565b909950975060208a0135965060408a0135955060608a0135945060808a0135915080821115612564575f80fd5b506125718a828b01612101565b989b979a50959850939692959293505050565b5f805f8060408587031215612597575f80fd5b84356001600160401b03808211156125ad575f80fd5b6125b988838901612101565b909650945060208701359150808211156125d1575f80fd5b506125de87828801612101565b95989497509550505050565b5f805f805f805f8060a0898b031215612601575f80fd5b61260a89612246565b975060208901356001600160401b0380821115612625575f80fd5b6126318c838d01612101565b909950975060408b0135915080821115612649575f80fd5b6126558c838d0161229a565b965060608b013591508082111561266a575f80fd5b6126768c838d01612101565b909650945060808b013591508082111561268e575f80fd5b5061269b8b828c01612101565b999c989b5096995094979396929594505050565b5f602082840312156126bf575f80fd5b81358015158114612228575f80fd5b5f805f80606085870312156126e1575f80fd5b84356001600160401b038111156126f6575f80fd5b61270287828801612101565b90989097506020870135966040013595509350505050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115611f7357611f7361271a565b5f808585111561274f575f80fd5b8386111561275b575f80fd5b5050820193919092039150565b6001600160401b0360c01b8960c01b16815287600882015286602882015285604882015284606882015282846088830137608892019182015260a8019695505050505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b858152846020820152608060408201525f6127f56080830185876127ae565b90508260608301529695505050505050565b80820180821115611f7357611f7361271a565b5f5b8381101561283457818101518382015260200161281c565b50505f910152565b858152846020820152608060408201525f61285b6080830185876127ae565b8281036060840152835180825261287981602084016020880161281a565b601f01601f191601602001979650505050505050565b5f8161289d5761289d61271a565b505f190190565b634e487b7160e01b5f52603260045260245ffd5b838152818360208301375f910160200190815292915050565b5f82516128e281846020870161281a565b9190910192915050565b5f80604083850312156128fd575f80fd5b505080516020909101519092909150565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8082028115828204841417611f7357611f7361271a565b5f60208284031215612980575f80fd5b505191905056fe26ba82f907317eedc97d0cbef23de76a43dd6edb563bdb6e9407645b950a7a2da2646970667358221220a221923ba75339fa3f70aaed6a642a9b68e610130fb6e054217385ae4d88c2d764736f6c63430008180033",
}

// ScrollChainMockFinalizeABI is the input ABI used to generate the binding from.
// Deprecated: Use ScrollChainMockFinalizeMetaData.ABI instead.
var ScrollChainMockFinalizeABI = ScrollChainMockFinalizeMetaData.ABI

// ScrollChainMockFinalizeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScrollChainMockFinalizeMetaData.Bin instead.
var ScrollChainMockFinalizeBin = ScrollChainMockFinalizeMetaData.Bin

// DeployScrollChainMockFinalize deploys a new Ethereum contract, binding an instance of ScrollChainMockFinalize to it.
func DeployScrollChainMockFinalize(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId uint64, _messageQueue common.Address, _verifier common.Address) (common.Address, *types.Transaction, *ScrollChainMockFinalize, error) {
	parsed, err := ScrollChainMockFinalizeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScrollChainMockFinalizeBin), backend, _chainId, _messageQueue, _verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ScrollChainMockFinalize{ScrollChainMockFinalizeCaller: ScrollChainMockFinalizeCaller{contract: contract}, ScrollChainMockFinalizeTransactor: ScrollChainMockFinalizeTransactor{contract: contract}, ScrollChainMockFinalizeFilterer: ScrollChainMockFinalizeFilterer{contract: contract}}, nil
}

// ScrollChainMockFinalize is an auto generated Go binding around an Ethereum contract.
type ScrollChainMockFinalize struct {
	ScrollChainMockFinalizeCaller     // Read-only binding to the contract
	ScrollChainMockFinalizeTransactor // Write-only binding to the contract
	ScrollChainMockFinalizeFilterer   // Log filterer for contract events
}

// ScrollChainMockFinalizeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScrollChainMockFinalizeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScrollChainMockFinalizeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScrollChainMockFinalizeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScrollChainMockFinalizeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScrollChainMockFinalizeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScrollChainMockFinalizeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScrollChainMockFinalizeSession struct {
	Contract     *ScrollChainMockFinalize // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ScrollChainMockFinalizeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScrollChainMockFinalizeCallerSession struct {
	Contract *ScrollChainMockFinalizeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ScrollChainMockFinalizeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScrollChainMockFinalizeTransactorSession struct {
	Contract     *ScrollChainMockFinalizeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ScrollChainMockFinalizeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScrollChainMockFinalizeRaw struct {
	Contract *ScrollChainMockFinalize // Generic contract binding to access the raw methods on
}

// ScrollChainMockFinalizeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScrollChainMockFinalizeCallerRaw struct {
	Contract *ScrollChainMockFinalizeCaller // Generic read-only contract binding to access the raw methods on
}

// ScrollChainMockFinalizeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScrollChainMockFinalizeTransactorRaw struct {
	Contract *ScrollChainMockFinalizeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScrollChainMockFinalize creates a new instance of ScrollChainMockFinalize, bound to a specific deployed contract.
func NewScrollChainMockFinalize(address common.Address, backend bind.ContractBackend) (*ScrollChainMockFinalize, error) {
	contract, err := bindScrollChainMockFinalize(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalize{ScrollChainMockFinalizeCaller: ScrollChainMockFinalizeCaller{contract: contract}, ScrollChainMockFinalizeTransactor: ScrollChainMockFinalizeTransactor{contract: contract}, ScrollChainMockFinalizeFilterer: ScrollChainMockFinalizeFilterer{contract: contract}}, nil
}

// NewScrollChainMockFinalizeCaller creates a new read-only instance of ScrollChainMockFinalize, bound to a specific deployed contract.
func NewScrollChainMockFinalizeCaller(address common.Address, caller bind.ContractCaller) (*ScrollChainMockFinalizeCaller, error) {
	contract, err := bindScrollChainMockFinalize(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeCaller{contract: contract}, nil
}

// NewScrollChainMockFinalizeTransactor creates a new write-only instance of ScrollChainMockFinalize, bound to a specific deployed contract.
func NewScrollChainMockFinalizeTransactor(address common.Address, transactor bind.ContractTransactor) (*ScrollChainMockFinalizeTransactor, error) {
	contract, err := bindScrollChainMockFinalize(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeTransactor{contract: contract}, nil
}

// NewScrollChainMockFinalizeFilterer creates a new log filterer instance of ScrollChainMockFinalize, bound to a specific deployed contract.
func NewScrollChainMockFinalizeFilterer(address common.Address, filterer bind.ContractFilterer) (*ScrollChainMockFinalizeFilterer, error) {
	contract, err := bindScrollChainMockFinalize(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeFilterer{contract: contract}, nil
}

// bindScrollChainMockFinalize binds a generic wrapper to an already deployed contract.
func bindScrollChainMockFinalize(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ScrollChainMockFinalizeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScrollChainMockFinalize.Contract.ScrollChainMockFinalizeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.ScrollChainMockFinalizeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.ScrollChainMockFinalizeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScrollChainMockFinalize.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.contract.Transact(opts, method, params...)
}

// CommittedBatches is a free data retrieval call binding the contract method 0x2362f03e.
//
// Solidity: function committedBatches(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) CommittedBatches(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "committedBatches", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CommittedBatches is a free data retrieval call binding the contract method 0x2362f03e.
//
// Solidity: function committedBatches(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) CommittedBatches(arg0 *big.Int) ([32]byte, error) {
	return _ScrollChainMockFinalize.Contract.CommittedBatches(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// CommittedBatches is a free data retrieval call binding the contract method 0x2362f03e.
//
// Solidity: function committedBatches(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) CommittedBatches(arg0 *big.Int) ([32]byte, error) {
	return _ScrollChainMockFinalize.Contract.CommittedBatches(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// FinalizedStateRoots is a free data retrieval call binding the contract method 0x2571098d.
//
// Solidity: function finalizedStateRoots(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) FinalizedStateRoots(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "finalizedStateRoots", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// FinalizedStateRoots is a free data retrieval call binding the contract method 0x2571098d.
//
// Solidity: function finalizedStateRoots(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) FinalizedStateRoots(arg0 *big.Int) ([32]byte, error) {
	return _ScrollChainMockFinalize.Contract.FinalizedStateRoots(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// FinalizedStateRoots is a free data retrieval call binding the contract method 0x2571098d.
//
// Solidity: function finalizedStateRoots(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) FinalizedStateRoots(arg0 *big.Int) ([32]byte, error) {
	return _ScrollChainMockFinalize.Contract.FinalizedStateRoots(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// IsBatchFinalized is a free data retrieval call binding the contract method 0x116a1f42.
//
// Solidity: function isBatchFinalized(uint256 _batchIndex) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) IsBatchFinalized(opts *bind.CallOpts, _batchIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "isBatchFinalized", _batchIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBatchFinalized is a free data retrieval call binding the contract method 0x116a1f42.
//
// Solidity: function isBatchFinalized(uint256 _batchIndex) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) IsBatchFinalized(_batchIndex *big.Int) (bool, error) {
	return _ScrollChainMockFinalize.Contract.IsBatchFinalized(&_ScrollChainMockFinalize.CallOpts, _batchIndex)
}

// IsBatchFinalized is a free data retrieval call binding the contract method 0x116a1f42.
//
// Solidity: function isBatchFinalized(uint256 _batchIndex) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) IsBatchFinalized(_batchIndex *big.Int) (bool, error) {
	return _ScrollChainMockFinalize.Contract.IsBatchFinalized(&_ScrollChainMockFinalize.CallOpts, _batchIndex)
}

// IsProver is a free data retrieval call binding the contract method 0x0a245924.
//
// Solidity: function isProver(address ) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) IsProver(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "isProver", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProver is a free data retrieval call binding the contract method 0x0a245924.
//
// Solidity: function isProver(address ) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) IsProver(arg0 common.Address) (bool, error) {
	return _ScrollChainMockFinalize.Contract.IsProver(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// IsProver is a free data retrieval call binding the contract method 0x0a245924.
//
// Solidity: function isProver(address ) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) IsProver(arg0 common.Address) (bool, error) {
	return _ScrollChainMockFinalize.Contract.IsProver(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// IsSequencer is a free data retrieval call binding the contract method 0x6d46e987.
//
// Solidity: function isSequencer(address ) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) IsSequencer(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "isSequencer", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSequencer is a free data retrieval call binding the contract method 0x6d46e987.
//
// Solidity: function isSequencer(address ) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) IsSequencer(arg0 common.Address) (bool, error) {
	return _ScrollChainMockFinalize.Contract.IsSequencer(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// IsSequencer is a free data retrieval call binding the contract method 0x6d46e987.
//
// Solidity: function isSequencer(address ) view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) IsSequencer(arg0 common.Address) (bool, error) {
	return _ScrollChainMockFinalize.Contract.IsSequencer(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// LastFinalizedBatchIndex is a free data retrieval call binding the contract method 0x059def61.
//
// Solidity: function lastFinalizedBatchIndex() view returns(uint256)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) LastFinalizedBatchIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "lastFinalizedBatchIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastFinalizedBatchIndex is a free data retrieval call binding the contract method 0x059def61.
//
// Solidity: function lastFinalizedBatchIndex() view returns(uint256)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) LastFinalizedBatchIndex() (*big.Int, error) {
	return _ScrollChainMockFinalize.Contract.LastFinalizedBatchIndex(&_ScrollChainMockFinalize.CallOpts)
}

// LastFinalizedBatchIndex is a free data retrieval call binding the contract method 0x059def61.
//
// Solidity: function lastFinalizedBatchIndex() view returns(uint256)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) LastFinalizedBatchIndex() (*big.Int, error) {
	return _ScrollChainMockFinalize.Contract.LastFinalizedBatchIndex(&_ScrollChainMockFinalize.CallOpts)
}

// Layer2ChainId is a free data retrieval call binding the contract method 0x03c7f4af.
//
// Solidity: function layer2ChainId() view returns(uint64)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) Layer2ChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "layer2ChainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Layer2ChainId is a free data retrieval call binding the contract method 0x03c7f4af.
//
// Solidity: function layer2ChainId() view returns(uint64)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) Layer2ChainId() (uint64, error) {
	return _ScrollChainMockFinalize.Contract.Layer2ChainId(&_ScrollChainMockFinalize.CallOpts)
}

// Layer2ChainId is a free data retrieval call binding the contract method 0x03c7f4af.
//
// Solidity: function layer2ChainId() view returns(uint64)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) Layer2ChainId() (uint64, error) {
	return _ScrollChainMockFinalize.Contract.Layer2ChainId(&_ScrollChainMockFinalize.CallOpts)
}

// MaxNumTxInChunk is a free data retrieval call binding the contract method 0xef6602ba.
//
// Solidity: function maxNumTxInChunk() view returns(uint256)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) MaxNumTxInChunk(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "maxNumTxInChunk")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxNumTxInChunk is a free data retrieval call binding the contract method 0xef6602ba.
//
// Solidity: function maxNumTxInChunk() view returns(uint256)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) MaxNumTxInChunk() (*big.Int, error) {
	return _ScrollChainMockFinalize.Contract.MaxNumTxInChunk(&_ScrollChainMockFinalize.CallOpts)
}

// MaxNumTxInChunk is a free data retrieval call binding the contract method 0xef6602ba.
//
// Solidity: function maxNumTxInChunk() view returns(uint256)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) MaxNumTxInChunk() (*big.Int, error) {
	return _ScrollChainMockFinalize.Contract.MaxNumTxInChunk(&_ScrollChainMockFinalize.CallOpts)
}

// MessageQueue is a free data retrieval call binding the contract method 0x3b70c18a.
//
// Solidity: function messageQueue() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) MessageQueue(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "messageQueue")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageQueue is a free data retrieval call binding the contract method 0x3b70c18a.
//
// Solidity: function messageQueue() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) MessageQueue() (common.Address, error) {
	return _ScrollChainMockFinalize.Contract.MessageQueue(&_ScrollChainMockFinalize.CallOpts)
}

// MessageQueue is a free data retrieval call binding the contract method 0x3b70c18a.
//
// Solidity: function messageQueue() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) MessageQueue() (common.Address, error) {
	return _ScrollChainMockFinalize.Contract.MessageQueue(&_ScrollChainMockFinalize.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) Owner() (common.Address, error) {
	return _ScrollChainMockFinalize.Contract.Owner(&_ScrollChainMockFinalize.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) Owner() (common.Address, error) {
	return _ScrollChainMockFinalize.Contract.Owner(&_ScrollChainMockFinalize.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) Paused() (bool, error) {
	return _ScrollChainMockFinalize.Contract.Paused(&_ScrollChainMockFinalize.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) Paused() (bool, error) {
	return _ScrollChainMockFinalize.Contract.Paused(&_ScrollChainMockFinalize.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) Verifier() (common.Address, error) {
	return _ScrollChainMockFinalize.Contract.Verifier(&_ScrollChainMockFinalize.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) Verifier() (common.Address, error) {
	return _ScrollChainMockFinalize.Contract.Verifier(&_ScrollChainMockFinalize.CallOpts)
}

// WithdrawRoots is a free data retrieval call binding the contract method 0xea5f084f.
//
// Solidity: function withdrawRoots(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCaller) WithdrawRoots(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ScrollChainMockFinalize.contract.Call(opts, &out, "withdrawRoots", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WithdrawRoots is a free data retrieval call binding the contract method 0xea5f084f.
//
// Solidity: function withdrawRoots(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) WithdrawRoots(arg0 *big.Int) ([32]byte, error) {
	return _ScrollChainMockFinalize.Contract.WithdrawRoots(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// WithdrawRoots is a free data retrieval call binding the contract method 0xea5f084f.
//
// Solidity: function withdrawRoots(uint256 ) view returns(bytes32)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeCallerSession) WithdrawRoots(arg0 *big.Int) ([32]byte, error) {
	return _ScrollChainMockFinalize.Contract.WithdrawRoots(&_ScrollChainMockFinalize.CallOpts, arg0)
}

// AddProver is a paid mutator transaction binding the contract method 0x1d49e457.
//
// Solidity: function addProver(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) AddProver(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "addProver", _account)
}

// AddProver is a paid mutator transaction binding the contract method 0x1d49e457.
//
// Solidity: function addProver(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) AddProver(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.AddProver(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// AddProver is a paid mutator transaction binding the contract method 0x1d49e457.
//
// Solidity: function addProver(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) AddProver(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.AddProver(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// AddSequencer is a paid mutator transaction binding the contract method 0x8a336231.
//
// Solidity: function addSequencer(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) AddSequencer(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "addSequencer", _account)
}

// AddSequencer is a paid mutator transaction binding the contract method 0x8a336231.
//
// Solidity: function addSequencer(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) AddSequencer(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.AddSequencer(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// AddSequencer is a paid mutator transaction binding the contract method 0x8a336231.
//
// Solidity: function addSequencer(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) AddSequencer(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.AddSequencer(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// CommitBatch is a paid mutator transaction binding the contract method 0x1325aca0.
//
// Solidity: function commitBatch(uint8 _version, bytes _parentBatchHeader, bytes[] _chunks, bytes _skippedL1MessageBitmap) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) CommitBatch(opts *bind.TransactOpts, _version uint8, _parentBatchHeader []byte, _chunks [][]byte, _skippedL1MessageBitmap []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "commitBatch", _version, _parentBatchHeader, _chunks, _skippedL1MessageBitmap)
}

// CommitBatch is a paid mutator transaction binding the contract method 0x1325aca0.
//
// Solidity: function commitBatch(uint8 _version, bytes _parentBatchHeader, bytes[] _chunks, bytes _skippedL1MessageBitmap) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) CommitBatch(_version uint8, _parentBatchHeader []byte, _chunks [][]byte, _skippedL1MessageBitmap []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.CommitBatch(&_ScrollChainMockFinalize.TransactOpts, _version, _parentBatchHeader, _chunks, _skippedL1MessageBitmap)
}

// CommitBatch is a paid mutator transaction binding the contract method 0x1325aca0.
//
// Solidity: function commitBatch(uint8 _version, bytes _parentBatchHeader, bytes[] _chunks, bytes _skippedL1MessageBitmap) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) CommitBatch(_version uint8, _parentBatchHeader []byte, _chunks [][]byte, _skippedL1MessageBitmap []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.CommitBatch(&_ScrollChainMockFinalize.TransactOpts, _version, _parentBatchHeader, _chunks, _skippedL1MessageBitmap)
}

// CommitBatchWithBlobProof is a paid mutator transaction binding the contract method 0x86b053a9.
//
// Solidity: function commitBatchWithBlobProof(uint8 _version, bytes _parentBatchHeader, bytes[] _chunks, bytes _skippedL1MessageBitmap, bytes _blobDataProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) CommitBatchWithBlobProof(opts *bind.TransactOpts, _version uint8, _parentBatchHeader []byte, _chunks [][]byte, _skippedL1MessageBitmap []byte, _blobDataProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "commitBatchWithBlobProof", _version, _parentBatchHeader, _chunks, _skippedL1MessageBitmap, _blobDataProof)
}

// CommitBatchWithBlobProof is a paid mutator transaction binding the contract method 0x86b053a9.
//
// Solidity: function commitBatchWithBlobProof(uint8 _version, bytes _parentBatchHeader, bytes[] _chunks, bytes _skippedL1MessageBitmap, bytes _blobDataProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) CommitBatchWithBlobProof(_version uint8, _parentBatchHeader []byte, _chunks [][]byte, _skippedL1MessageBitmap []byte, _blobDataProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.CommitBatchWithBlobProof(&_ScrollChainMockFinalize.TransactOpts, _version, _parentBatchHeader, _chunks, _skippedL1MessageBitmap, _blobDataProof)
}

// CommitBatchWithBlobProof is a paid mutator transaction binding the contract method 0x86b053a9.
//
// Solidity: function commitBatchWithBlobProof(uint8 _version, bytes _parentBatchHeader, bytes[] _chunks, bytes _skippedL1MessageBitmap, bytes _blobDataProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) CommitBatchWithBlobProof(_version uint8, _parentBatchHeader []byte, _chunks [][]byte, _skippedL1MessageBitmap []byte, _blobDataProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.CommitBatchWithBlobProof(&_ScrollChainMockFinalize.TransactOpts, _version, _parentBatchHeader, _chunks, _skippedL1MessageBitmap, _blobDataProof)
}

// FinalizeBatch4844 is a paid mutator transaction binding the contract method 0x68485e47.
//
// Solidity: function finalizeBatch4844(bytes _batchHeader, bytes32 , bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) FinalizeBatch4844(opts *bind.TransactOpts, _batchHeader []byte, arg1 [32]byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _blobDataProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "finalizeBatch4844", _batchHeader, arg1, _postStateRoot, _withdrawRoot, _blobDataProof)
}

// FinalizeBatch4844 is a paid mutator transaction binding the contract method 0x68485e47.
//
// Solidity: function finalizeBatch4844(bytes _batchHeader, bytes32 , bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) FinalizeBatch4844(_batchHeader []byte, arg1 [32]byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _blobDataProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBatch4844(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, arg1, _postStateRoot, _withdrawRoot, _blobDataProof)
}

// FinalizeBatch4844 is a paid mutator transaction binding the contract method 0x68485e47.
//
// Solidity: function finalizeBatch4844(bytes _batchHeader, bytes32 , bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) FinalizeBatch4844(_batchHeader []byte, arg1 [32]byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _blobDataProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBatch4844(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, arg1, _postStateRoot, _withdrawRoot, _blobDataProof)
}

// FinalizeBatchWithProof4844 is a paid mutator transaction binding the contract method 0x00b0f4d7.
//
// Solidity: function finalizeBatchWithProof4844(bytes _batchHeader, bytes32 , bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof, bytes _aggrProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) FinalizeBatchWithProof4844(opts *bind.TransactOpts, _batchHeader []byte, arg1 [32]byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _blobDataProof []byte, _aggrProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "finalizeBatchWithProof4844", _batchHeader, arg1, _postStateRoot, _withdrawRoot, _blobDataProof, _aggrProof)
}

// FinalizeBatchWithProof4844 is a paid mutator transaction binding the contract method 0x00b0f4d7.
//
// Solidity: function finalizeBatchWithProof4844(bytes _batchHeader, bytes32 , bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof, bytes _aggrProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) FinalizeBatchWithProof4844(_batchHeader []byte, arg1 [32]byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _blobDataProof []byte, _aggrProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBatchWithProof4844(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, arg1, _postStateRoot, _withdrawRoot, _blobDataProof, _aggrProof)
}

// FinalizeBatchWithProof4844 is a paid mutator transaction binding the contract method 0x00b0f4d7.
//
// Solidity: function finalizeBatchWithProof4844(bytes _batchHeader, bytes32 , bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof, bytes _aggrProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) FinalizeBatchWithProof4844(_batchHeader []byte, arg1 [32]byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _blobDataProof []byte, _aggrProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBatchWithProof4844(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, arg1, _postStateRoot, _withdrawRoot, _blobDataProof, _aggrProof)
}

// FinalizeBundle is a paid mutator transaction binding the contract method 0xeb43a133.
//
// Solidity: function finalizeBundle(bytes _batchHeader, bytes32 _postStateRoot, bytes32 _withdrawRoot) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) FinalizeBundle(opts *bind.TransactOpts, _batchHeader []byte, _postStateRoot [32]byte, _withdrawRoot [32]byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "finalizeBundle", _batchHeader, _postStateRoot, _withdrawRoot)
}

// FinalizeBundle is a paid mutator transaction binding the contract method 0xeb43a133.
//
// Solidity: function finalizeBundle(bytes _batchHeader, bytes32 _postStateRoot, bytes32 _withdrawRoot) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) FinalizeBundle(_batchHeader []byte, _postStateRoot [32]byte, _withdrawRoot [32]byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBundle(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, _postStateRoot, _withdrawRoot)
}

// FinalizeBundle is a paid mutator transaction binding the contract method 0xeb43a133.
//
// Solidity: function finalizeBundle(bytes _batchHeader, bytes32 _postStateRoot, bytes32 _withdrawRoot) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) FinalizeBundle(_batchHeader []byte, _postStateRoot [32]byte, _withdrawRoot [32]byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBundle(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, _postStateRoot, _withdrawRoot)
}

// FinalizeBundleWithProof is a paid mutator transaction binding the contract method 0x4f099e3d.
//
// Solidity: function finalizeBundleWithProof(bytes _batchHeader, bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _aggrProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) FinalizeBundleWithProof(opts *bind.TransactOpts, _batchHeader []byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _aggrProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "finalizeBundleWithProof", _batchHeader, _postStateRoot, _withdrawRoot, _aggrProof)
}

// FinalizeBundleWithProof is a paid mutator transaction binding the contract method 0x4f099e3d.
//
// Solidity: function finalizeBundleWithProof(bytes _batchHeader, bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _aggrProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) FinalizeBundleWithProof(_batchHeader []byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _aggrProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBundleWithProof(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, _postStateRoot, _withdrawRoot, _aggrProof)
}

// FinalizeBundleWithProof is a paid mutator transaction binding the contract method 0x4f099e3d.
//
// Solidity: function finalizeBundleWithProof(bytes _batchHeader, bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _aggrProof) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) FinalizeBundleWithProof(_batchHeader []byte, _postStateRoot [32]byte, _withdrawRoot [32]byte, _aggrProof []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.FinalizeBundleWithProof(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, _postStateRoot, _withdrawRoot, _aggrProof)
}

// ImportGenesisBatch is a paid mutator transaction binding the contract method 0x3fdeecb2.
//
// Solidity: function importGenesisBatch(bytes _batchHeader, bytes32 _stateRoot) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) ImportGenesisBatch(opts *bind.TransactOpts, _batchHeader []byte, _stateRoot [32]byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "importGenesisBatch", _batchHeader, _stateRoot)
}

// ImportGenesisBatch is a paid mutator transaction binding the contract method 0x3fdeecb2.
//
// Solidity: function importGenesisBatch(bytes _batchHeader, bytes32 _stateRoot) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) ImportGenesisBatch(_batchHeader []byte, _stateRoot [32]byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.ImportGenesisBatch(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, _stateRoot)
}

// ImportGenesisBatch is a paid mutator transaction binding the contract method 0x3fdeecb2.
//
// Solidity: function importGenesisBatch(bytes _batchHeader, bytes32 _stateRoot) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) ImportGenesisBatch(_batchHeader []byte, _stateRoot [32]byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.ImportGenesisBatch(&_ScrollChainMockFinalize.TransactOpts, _batchHeader, _stateRoot)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address _messageQueue, address _verifier, uint256 _maxNumTxInChunk) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) Initialize(opts *bind.TransactOpts, _messageQueue common.Address, _verifier common.Address, _maxNumTxInChunk *big.Int) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "initialize", _messageQueue, _verifier, _maxNumTxInChunk)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address _messageQueue, address _verifier, uint256 _maxNumTxInChunk) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) Initialize(_messageQueue common.Address, _verifier common.Address, _maxNumTxInChunk *big.Int) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.Initialize(&_ScrollChainMockFinalize.TransactOpts, _messageQueue, _verifier, _maxNumTxInChunk)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address _messageQueue, address _verifier, uint256 _maxNumTxInChunk) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) Initialize(_messageQueue common.Address, _verifier common.Address, _maxNumTxInChunk *big.Int) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.Initialize(&_ScrollChainMockFinalize.TransactOpts, _messageQueue, _verifier, _maxNumTxInChunk)
}

// RemoveProver is a paid mutator transaction binding the contract method 0xb571d3dd.
//
// Solidity: function removeProver(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) RemoveProver(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "removeProver", _account)
}

// RemoveProver is a paid mutator transaction binding the contract method 0xb571d3dd.
//
// Solidity: function removeProver(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) RemoveProver(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RemoveProver(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// RemoveProver is a paid mutator transaction binding the contract method 0xb571d3dd.
//
// Solidity: function removeProver(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) RemoveProver(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RemoveProver(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// RemoveSequencer is a paid mutator transaction binding the contract method 0x6989ca7c.
//
// Solidity: function removeSequencer(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) RemoveSequencer(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "removeSequencer", _account)
}

// RemoveSequencer is a paid mutator transaction binding the contract method 0x6989ca7c.
//
// Solidity: function removeSequencer(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) RemoveSequencer(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RemoveSequencer(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// RemoveSequencer is a paid mutator transaction binding the contract method 0x6989ca7c.
//
// Solidity: function removeSequencer(address _account) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) RemoveSequencer(_account common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RemoveSequencer(&_ScrollChainMockFinalize.TransactOpts, _account)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) RenounceOwnership() (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RenounceOwnership(&_ScrollChainMockFinalize.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RenounceOwnership(&_ScrollChainMockFinalize.TransactOpts)
}

// RevertBatch is a paid mutator transaction binding the contract method 0x6df4e686.
//
// Solidity: function revertBatch(bytes _firstBatchHeader, bytes _lastBatchHeader) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) RevertBatch(opts *bind.TransactOpts, _firstBatchHeader []byte, _lastBatchHeader []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "revertBatch", _firstBatchHeader, _lastBatchHeader)
}

// RevertBatch is a paid mutator transaction binding the contract method 0x6df4e686.
//
// Solidity: function revertBatch(bytes _firstBatchHeader, bytes _lastBatchHeader) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) RevertBatch(_firstBatchHeader []byte, _lastBatchHeader []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RevertBatch(&_ScrollChainMockFinalize.TransactOpts, _firstBatchHeader, _lastBatchHeader)
}

// RevertBatch is a paid mutator transaction binding the contract method 0x6df4e686.
//
// Solidity: function revertBatch(bytes _firstBatchHeader, bytes _lastBatchHeader) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) RevertBatch(_firstBatchHeader []byte, _lastBatchHeader []byte) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.RevertBatch(&_ScrollChainMockFinalize.TransactOpts, _firstBatchHeader, _lastBatchHeader)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool _status) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) SetPause(opts *bind.TransactOpts, _status bool) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "setPause", _status)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool _status) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) SetPause(_status bool) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.SetPause(&_ScrollChainMockFinalize.TransactOpts, _status)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool _status) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) SetPause(_status bool) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.SetPause(&_ScrollChainMockFinalize.TransactOpts, _status)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.TransferOwnership(&_ScrollChainMockFinalize.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.TransferOwnership(&_ScrollChainMockFinalize.TransactOpts, newOwner)
}

// UpdateMaxNumTxInChunk is a paid mutator transaction binding the contract method 0x1e228302.
//
// Solidity: function updateMaxNumTxInChunk(uint256 _maxNumTxInChunk) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactor) UpdateMaxNumTxInChunk(opts *bind.TransactOpts, _maxNumTxInChunk *big.Int) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.contract.Transact(opts, "updateMaxNumTxInChunk", _maxNumTxInChunk)
}

// UpdateMaxNumTxInChunk is a paid mutator transaction binding the contract method 0x1e228302.
//
// Solidity: function updateMaxNumTxInChunk(uint256 _maxNumTxInChunk) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeSession) UpdateMaxNumTxInChunk(_maxNumTxInChunk *big.Int) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.UpdateMaxNumTxInChunk(&_ScrollChainMockFinalize.TransactOpts, _maxNumTxInChunk)
}

// UpdateMaxNumTxInChunk is a paid mutator transaction binding the contract method 0x1e228302.
//
// Solidity: function updateMaxNumTxInChunk(uint256 _maxNumTxInChunk) returns()
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeTransactorSession) UpdateMaxNumTxInChunk(_maxNumTxInChunk *big.Int) (*types.Transaction, error) {
	return _ScrollChainMockFinalize.Contract.UpdateMaxNumTxInChunk(&_ScrollChainMockFinalize.TransactOpts, _maxNumTxInChunk)
}

// ScrollChainMockFinalizeCommitBatchIterator is returned from FilterCommitBatch and is used to iterate over the raw logs and unpacked data for CommitBatch events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeCommitBatchIterator struct {
	Event *ScrollChainMockFinalizeCommitBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeCommitBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeCommitBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeCommitBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeCommitBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeCommitBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeCommitBatch represents a CommitBatch event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeCommitBatch struct {
	BatchIndex *big.Int
	BatchHash  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCommitBatch is a free log retrieval operation binding the contract event 0x2c32d4ae151744d0bf0b9464a3e897a1d17ed2f1af71f7c9a75f12ce0d28238f.
//
// Solidity: event CommitBatch(uint256 indexed batchIndex, bytes32 indexed batchHash)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterCommitBatch(opts *bind.FilterOpts, batchIndex []*big.Int, batchHash [][32]byte) (*ScrollChainMockFinalizeCommitBatchIterator, error) {

	var batchIndexRule []interface{}
	for _, batchIndexItem := range batchIndex {
		batchIndexRule = append(batchIndexRule, batchIndexItem)
	}
	var batchHashRule []interface{}
	for _, batchHashItem := range batchHash {
		batchHashRule = append(batchHashRule, batchHashItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "CommitBatch", batchIndexRule, batchHashRule)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeCommitBatchIterator{contract: _ScrollChainMockFinalize.contract, event: "CommitBatch", logs: logs, sub: sub}, nil
}

// WatchCommitBatch is a free log subscription operation binding the contract event 0x2c32d4ae151744d0bf0b9464a3e897a1d17ed2f1af71f7c9a75f12ce0d28238f.
//
// Solidity: event CommitBatch(uint256 indexed batchIndex, bytes32 indexed batchHash)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchCommitBatch(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeCommitBatch, batchIndex []*big.Int, batchHash [][32]byte) (event.Subscription, error) {

	var batchIndexRule []interface{}
	for _, batchIndexItem := range batchIndex {
		batchIndexRule = append(batchIndexRule, batchIndexItem)
	}
	var batchHashRule []interface{}
	for _, batchHashItem := range batchHash {
		batchHashRule = append(batchHashRule, batchHashItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "CommitBatch", batchIndexRule, batchHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeCommitBatch)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "CommitBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitBatch is a log parse operation binding the contract event 0x2c32d4ae151744d0bf0b9464a3e897a1d17ed2f1af71f7c9a75f12ce0d28238f.
//
// Solidity: event CommitBatch(uint256 indexed batchIndex, bytes32 indexed batchHash)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseCommitBatch(log types.Log) (*ScrollChainMockFinalizeCommitBatch, error) {
	event := new(ScrollChainMockFinalizeCommitBatch)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "CommitBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeFinalizeBatchIterator is returned from FilterFinalizeBatch and is used to iterate over the raw logs and unpacked data for FinalizeBatch events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeFinalizeBatchIterator struct {
	Event *ScrollChainMockFinalizeFinalizeBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeFinalizeBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeFinalizeBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeFinalizeBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeFinalizeBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeFinalizeBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeFinalizeBatch represents a FinalizeBatch event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeFinalizeBatch struct {
	BatchIndex   *big.Int
	BatchHash    [32]byte
	StateRoot    [32]byte
	WithdrawRoot [32]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFinalizeBatch is a free log retrieval operation binding the contract event 0x26ba82f907317eedc97d0cbef23de76a43dd6edb563bdb6e9407645b950a7a2d.
//
// Solidity: event FinalizeBatch(uint256 indexed batchIndex, bytes32 indexed batchHash, bytes32 stateRoot, bytes32 withdrawRoot)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterFinalizeBatch(opts *bind.FilterOpts, batchIndex []*big.Int, batchHash [][32]byte) (*ScrollChainMockFinalizeFinalizeBatchIterator, error) {

	var batchIndexRule []interface{}
	for _, batchIndexItem := range batchIndex {
		batchIndexRule = append(batchIndexRule, batchIndexItem)
	}
	var batchHashRule []interface{}
	for _, batchHashItem := range batchHash {
		batchHashRule = append(batchHashRule, batchHashItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "FinalizeBatch", batchIndexRule, batchHashRule)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeFinalizeBatchIterator{contract: _ScrollChainMockFinalize.contract, event: "FinalizeBatch", logs: logs, sub: sub}, nil
}

// WatchFinalizeBatch is a free log subscription operation binding the contract event 0x26ba82f907317eedc97d0cbef23de76a43dd6edb563bdb6e9407645b950a7a2d.
//
// Solidity: event FinalizeBatch(uint256 indexed batchIndex, bytes32 indexed batchHash, bytes32 stateRoot, bytes32 withdrawRoot)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchFinalizeBatch(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeFinalizeBatch, batchIndex []*big.Int, batchHash [][32]byte) (event.Subscription, error) {

	var batchIndexRule []interface{}
	for _, batchIndexItem := range batchIndex {
		batchIndexRule = append(batchIndexRule, batchIndexItem)
	}
	var batchHashRule []interface{}
	for _, batchHashItem := range batchHash {
		batchHashRule = append(batchHashRule, batchHashItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "FinalizeBatch", batchIndexRule, batchHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeFinalizeBatch)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "FinalizeBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinalizeBatch is a log parse operation binding the contract event 0x26ba82f907317eedc97d0cbef23de76a43dd6edb563bdb6e9407645b950a7a2d.
//
// Solidity: event FinalizeBatch(uint256 indexed batchIndex, bytes32 indexed batchHash, bytes32 stateRoot, bytes32 withdrawRoot)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseFinalizeBatch(log types.Log) (*ScrollChainMockFinalizeFinalizeBatch, error) {
	event := new(ScrollChainMockFinalizeFinalizeBatch)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "FinalizeBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeInitializedIterator struct {
	Event *ScrollChainMockFinalizeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeInitialized represents a Initialized event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterInitialized(opts *bind.FilterOpts) (*ScrollChainMockFinalizeInitializedIterator, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeInitializedIterator{contract: _ScrollChainMockFinalize.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeInitialized) (event.Subscription, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeInitialized)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseInitialized(log types.Log) (*ScrollChainMockFinalizeInitialized, error) {
	event := new(ScrollChainMockFinalizeInitialized)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeOwnershipTransferredIterator struct {
	Event *ScrollChainMockFinalizeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeOwnershipTransferred represents a OwnershipTransferred event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ScrollChainMockFinalizeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeOwnershipTransferredIterator{contract: _ScrollChainMockFinalize.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeOwnershipTransferred)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseOwnershipTransferred(log types.Log) (*ScrollChainMockFinalizeOwnershipTransferred, error) {
	event := new(ScrollChainMockFinalizeOwnershipTransferred)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizePausedIterator struct {
	Event *ScrollChainMockFinalizePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizePaused represents a Paused event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterPaused(opts *bind.FilterOpts) (*ScrollChainMockFinalizePausedIterator, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizePausedIterator{contract: _ScrollChainMockFinalize.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizePaused) (event.Subscription, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizePaused)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParsePaused(log types.Log) (*ScrollChainMockFinalizePaused, error) {
	event := new(ScrollChainMockFinalizePaused)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeRevertBatchIterator is returned from FilterRevertBatch and is used to iterate over the raw logs and unpacked data for RevertBatch events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeRevertBatchIterator struct {
	Event *ScrollChainMockFinalizeRevertBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeRevertBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeRevertBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeRevertBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeRevertBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeRevertBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeRevertBatch represents a RevertBatch event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeRevertBatch struct {
	BatchIndex *big.Int
	BatchHash  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevertBatch is a free log retrieval operation binding the contract event 0x00cae2739091badfd91c373f0a16cede691e0cd25bb80cff77dd5caeb4710146.
//
// Solidity: event RevertBatch(uint256 indexed batchIndex, bytes32 indexed batchHash)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterRevertBatch(opts *bind.FilterOpts, batchIndex []*big.Int, batchHash [][32]byte) (*ScrollChainMockFinalizeRevertBatchIterator, error) {

	var batchIndexRule []interface{}
	for _, batchIndexItem := range batchIndex {
		batchIndexRule = append(batchIndexRule, batchIndexItem)
	}
	var batchHashRule []interface{}
	for _, batchHashItem := range batchHash {
		batchHashRule = append(batchHashRule, batchHashItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "RevertBatch", batchIndexRule, batchHashRule)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeRevertBatchIterator{contract: _ScrollChainMockFinalize.contract, event: "RevertBatch", logs: logs, sub: sub}, nil
}

// WatchRevertBatch is a free log subscription operation binding the contract event 0x00cae2739091badfd91c373f0a16cede691e0cd25bb80cff77dd5caeb4710146.
//
// Solidity: event RevertBatch(uint256 indexed batchIndex, bytes32 indexed batchHash)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchRevertBatch(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeRevertBatch, batchIndex []*big.Int, batchHash [][32]byte) (event.Subscription, error) {

	var batchIndexRule []interface{}
	for _, batchIndexItem := range batchIndex {
		batchIndexRule = append(batchIndexRule, batchIndexItem)
	}
	var batchHashRule []interface{}
	for _, batchHashItem := range batchHash {
		batchHashRule = append(batchHashRule, batchHashItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "RevertBatch", batchIndexRule, batchHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeRevertBatch)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "RevertBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBatch is a log parse operation binding the contract event 0x00cae2739091badfd91c373f0a16cede691e0cd25bb80cff77dd5caeb4710146.
//
// Solidity: event RevertBatch(uint256 indexed batchIndex, bytes32 indexed batchHash)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseRevertBatch(log types.Log) (*ScrollChainMockFinalizeRevertBatch, error) {
	event := new(ScrollChainMockFinalizeRevertBatch)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "RevertBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUnpausedIterator struct {
	Event *ScrollChainMockFinalizeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeUnpaused represents a Unpaused event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ScrollChainMockFinalizeUnpausedIterator, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeUnpausedIterator{contract: _ScrollChainMockFinalize.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeUnpaused) (event.Subscription, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeUnpaused)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseUnpaused(log types.Log) (*ScrollChainMockFinalizeUnpaused, error) {
	event := new(ScrollChainMockFinalizeUnpaused)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator is returned from FilterUpdateMaxNumTxInChunk and is used to iterate over the raw logs and unpacked data for UpdateMaxNumTxInChunk events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator struct {
	Event *ScrollChainMockFinalizeUpdateMaxNumTxInChunk // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeUpdateMaxNumTxInChunk)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeUpdateMaxNumTxInChunk)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeUpdateMaxNumTxInChunk represents a UpdateMaxNumTxInChunk event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUpdateMaxNumTxInChunk struct {
	OldMaxNumTxInChunk *big.Int
	NewMaxNumTxInChunk *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterUpdateMaxNumTxInChunk is a free log retrieval operation binding the contract event 0x6d0f49971e462a2f78a25906f145cb29cd5e7bd01ebf681ac8f58cb814e5877a.
//
// Solidity: event UpdateMaxNumTxInChunk(uint256 oldMaxNumTxInChunk, uint256 newMaxNumTxInChunk)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterUpdateMaxNumTxInChunk(opts *bind.FilterOpts) (*ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "UpdateMaxNumTxInChunk")
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeUpdateMaxNumTxInChunkIterator{contract: _ScrollChainMockFinalize.contract, event: "UpdateMaxNumTxInChunk", logs: logs, sub: sub}, nil
}

// WatchUpdateMaxNumTxInChunk is a free log subscription operation binding the contract event 0x6d0f49971e462a2f78a25906f145cb29cd5e7bd01ebf681ac8f58cb814e5877a.
//
// Solidity: event UpdateMaxNumTxInChunk(uint256 oldMaxNumTxInChunk, uint256 newMaxNumTxInChunk)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchUpdateMaxNumTxInChunk(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeUpdateMaxNumTxInChunk) (event.Subscription, error) {

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "UpdateMaxNumTxInChunk")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeUpdateMaxNumTxInChunk)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "UpdateMaxNumTxInChunk", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateMaxNumTxInChunk is a log parse operation binding the contract event 0x6d0f49971e462a2f78a25906f145cb29cd5e7bd01ebf681ac8f58cb814e5877a.
//
// Solidity: event UpdateMaxNumTxInChunk(uint256 oldMaxNumTxInChunk, uint256 newMaxNumTxInChunk)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseUpdateMaxNumTxInChunk(log types.Log) (*ScrollChainMockFinalizeUpdateMaxNumTxInChunk, error) {
	event := new(ScrollChainMockFinalizeUpdateMaxNumTxInChunk)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "UpdateMaxNumTxInChunk", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeUpdateProverIterator is returned from FilterUpdateProver and is used to iterate over the raw logs and unpacked data for UpdateProver events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUpdateProverIterator struct {
	Event *ScrollChainMockFinalizeUpdateProver // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeUpdateProverIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeUpdateProver)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeUpdateProver)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeUpdateProverIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeUpdateProverIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeUpdateProver represents a UpdateProver event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUpdateProver struct {
	Account common.Address
	Status  bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateProver is a free log retrieval operation binding the contract event 0x967f99d5d403870e4356ff46556df3a6b6ba1f50146639aaedfb9f248eb8661e.
//
// Solidity: event UpdateProver(address indexed account, bool status)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterUpdateProver(opts *bind.FilterOpts, account []common.Address) (*ScrollChainMockFinalizeUpdateProverIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "UpdateProver", accountRule)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeUpdateProverIterator{contract: _ScrollChainMockFinalize.contract, event: "UpdateProver", logs: logs, sub: sub}, nil
}

// WatchUpdateProver is a free log subscription operation binding the contract event 0x967f99d5d403870e4356ff46556df3a6b6ba1f50146639aaedfb9f248eb8661e.
//
// Solidity: event UpdateProver(address indexed account, bool status)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchUpdateProver(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeUpdateProver, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "UpdateProver", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeUpdateProver)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "UpdateProver", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateProver is a log parse operation binding the contract event 0x967f99d5d403870e4356ff46556df3a6b6ba1f50146639aaedfb9f248eb8661e.
//
// Solidity: event UpdateProver(address indexed account, bool status)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseUpdateProver(log types.Log) (*ScrollChainMockFinalizeUpdateProver, error) {
	event := new(ScrollChainMockFinalizeUpdateProver)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "UpdateProver", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScrollChainMockFinalizeUpdateSequencerIterator is returned from FilterUpdateSequencer and is used to iterate over the raw logs and unpacked data for UpdateSequencer events raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUpdateSequencerIterator struct {
	Event *ScrollChainMockFinalizeUpdateSequencer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScrollChainMockFinalizeUpdateSequencerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScrollChainMockFinalizeUpdateSequencer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScrollChainMockFinalizeUpdateSequencer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScrollChainMockFinalizeUpdateSequencerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScrollChainMockFinalizeUpdateSequencerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScrollChainMockFinalizeUpdateSequencer represents a UpdateSequencer event raised by the ScrollChainMockFinalize contract.
type ScrollChainMockFinalizeUpdateSequencer struct {
	Account common.Address
	Status  bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateSequencer is a free log retrieval operation binding the contract event 0x631cb110fbe6a87fba5414d6b2cff02264480535cd1f5abdbc4fa638bc0b5692.
//
// Solidity: event UpdateSequencer(address indexed account, bool status)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) FilterUpdateSequencer(opts *bind.FilterOpts, account []common.Address) (*ScrollChainMockFinalizeUpdateSequencerIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.FilterLogs(opts, "UpdateSequencer", accountRule)
	if err != nil {
		return nil, err
	}
	return &ScrollChainMockFinalizeUpdateSequencerIterator{contract: _ScrollChainMockFinalize.contract, event: "UpdateSequencer", logs: logs, sub: sub}, nil
}

// WatchUpdateSequencer is a free log subscription operation binding the contract event 0x631cb110fbe6a87fba5414d6b2cff02264480535cd1f5abdbc4fa638bc0b5692.
//
// Solidity: event UpdateSequencer(address indexed account, bool status)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) WatchUpdateSequencer(opts *bind.WatchOpts, sink chan<- *ScrollChainMockFinalizeUpdateSequencer, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ScrollChainMockFinalize.contract.WatchLogs(opts, "UpdateSequencer", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScrollChainMockFinalizeUpdateSequencer)
				if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "UpdateSequencer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateSequencer is a log parse operation binding the contract event 0x631cb110fbe6a87fba5414d6b2cff02264480535cd1f5abdbc4fa638bc0b5692.
//
// Solidity: event UpdateSequencer(address indexed account, bool status)
func (_ScrollChainMockFinalize *ScrollChainMockFinalizeFilterer) ParseUpdateSequencer(log types.Log) (*ScrollChainMockFinalizeUpdateSequencer, error) {
	event := new(ScrollChainMockFinalizeUpdateSequencer)
	if err := _ScrollChainMockFinalize.contract.UnpackLog(event, "UpdateSequencer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
